package bot

import (
	"fmt"
	"log"
	"math/rand"
	"strings"

	"github.com/ryabkov82/vpnbot/internal/config"
	"github.com/ryabkov82/vpnbot/internal/models"
	"github.com/ryabkov82/vpnbot/internal/service"

	"gopkg.in/telebot.v3"
)

// Service —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
type Service struct {
	service *service.Service
	config  *config.Config
}

func NewService(service *service.Service, cfg *config.Config) *Service {
	return &Service{
		service: service,
		config:  cfg,
	}
}

func (s *Service) handleStart(c telebot.Context) error {

	user, err := s.service.GetUser(c.Chat().ID)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err)
		return c.Send("–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
	}

	if user == nil {
		return s.showRegistrationMenu(c)
	}

	return s.showMainMenu(c)
}

func (s *Service) handleMenu(c telebot.Context) error {
	return s.showMainMenu(c)
}

// showRegistrationMenu –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
func (s *Service) showRegistrationMenu(c telebot.Context) error {
	menu := &telebot.ReplyMarkup{}
	btnRegister := menu.Data("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚úç", "/register")

	username := c.Sender().Username
	if username == "" {
		username = "–Ω–µ —É–∫–∞–∑–∞–Ω"
	}

	msg := fmt.Sprintf(
		"–î–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–æ–º —É–∫–∞–∂–∏—Ç–µ _Telegram –ª–æ–≥–∏–Ω_ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞.\n\n"+
			"*Telegram –ª–æ–≥–∏–Ω*: %s\n\n"+
			"*–ö–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*: %s",
		username,
		s.config.Cli.URL,
	)

	menu.Inline(menu.Row(btnRegister))
	err := c.Send(msg, menu, telebot.ModeMarkdown)
	if err != nil {
		if strings.Contains(err.Error(), "can't parse entities") {
			// –ü—Ä–æ–±—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
			safeText := strings.ReplaceAll(msg, "*", "\\*")
			safeText = strings.ReplaceAll(safeText, "_", "\\_")
			safeText = strings.ReplaceAll(safeText, "[", "\\[")

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤–µ—Ä—Å–∏—é
			return c.Send(safeText, menu, telebot.ModeMarkdown)
		}
		return err
	}
	return nil
}

// showMainMenu –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
func (s *Service) showMainMenu(c telebot.Context) error {

	menu := &telebot.ReplyMarkup{}
	btnBalance := menu.Data("üí∞ –ë–∞–ª–∞–Ω—Å", "/balance")
	btnKeys := menu.Data("üóù –ö–ª—é—á–∏", "/list")

	menu.Inline(
		menu.Row(btnBalance),
		menu.Row(btnKeys),
	)

	msg := "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ VPN –∫–ª—é—á–∞–º–∏"
	if c.Callback() != nil {
		err := c.Edit(
			msg,
			menu,
		)
		if err == nil {
			return nil
		}
	}

	return c.Send(msg, menu)
}

func (s *Service) handleBalance(c telebot.Context) error {

	userBalance, err := s.service.GetUserBalance(c.Chat().ID)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err)
		return c.Send("–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
	}

	menu := &telebot.ReplyMarkup{}
	btnPay := menu.WebApp("‚úö –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", &telebot.WebApp{
		URL: fmt.Sprintf("%s/shm/v1/public/tg_payments_webapp?format=html&user_id=%s&profile=telegram_test_bot", s.config.API.BaseURL, userBalance.ID),
	})
	btnBack := menu.Data("‚á¶ –ù–∞–∑–∞–¥", "/menu")

	menu.Inline(
		menu.Row(btnPay),
		menu.Row(btnBack),
	)

	msg := fmt.Sprintf("üí∞ *–ë–∞–ª–∞–Ω—Å*: %.2f\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å: *%.2f*", userBalance.Balance, userBalance.Forecast)
	if c.Callback() != nil {
		err := c.Edit(
			msg,
			menu,
			telebot.ModeMarkdown,
		)
		if err == nil {
			return nil
		}
	}

	return c.Send(
		msg,
		menu,
		telebot.ModeMarkdown,
	)
}

func (s *Service) handleList(c telebot.Context) error {

	/*
		if err := c.Delete(); err != nil {
			log.Println(err)
		}
	*/

	services, err := s.service.GetUserServices(c.Chat().ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥: %v", err)
		return c.Send("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥")
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
	if len(services) == 0 {
		return c.Send("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥")
	}

	menu := &telebot.ReplyMarkup{}
	var rows []telebot.Row

	for _, s := range services {
		var status string
		switch s.Status {
		case "ACTIVE":
			status = "‚úÖ"
		case "BLOCK":
			status = "‚ùå"
		default:
			status = "‚è≥"
		}

		rows = append(rows, menu.Row(
			menu.Data(fmt.Sprintf("%s - %s", status, s.Name), "/service", fmt.Sprint(s.ServiceID)),
		))
	}

	rows = append(rows,
		menu.Row(menu.Data("üõí –ù–æ–≤—ã–π –∫–ª—é—á", "/pricelist")),
		menu.Row(menu.Data("‚á¶ –ù–∞–∑–∞–¥", "/menu")),
	)

	menu.Inline(rows...)

	if c.Callback() != nil {
		err := c.Edit("üóù –í–∞—à–∏ –∫–ª—é—á–∏:", menu)
		if err == nil {
			return nil
		}
	}

	return c.Send("üóù –í–∞—à–∏ –∫–ª—é—á–∏:", menu)
}

func (s *Service) handleRegister(c telebot.Context) error {

	user := c.Sender()

	login := fmt.Sprintf("@%d", user.ID)
	userID := fmt.Sprintf("%d", user.ID)

	// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	regData := models.UserRegistrationRequest{
		Login:    login,
		Password: generatePassword(), // –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è
		FullName: fmt.Sprintf("%s %s", user.FirstName, user.LastName),
		Settings: models.UserSettings{
			Telegram: models.TelegramInfo{
				UserID:       userID,
				Username:     user.Username,
				Login:        user.Username,
				FirstName:    user.FirstName,
				LastName:     user.LastName,
				LanguageCode: user.LanguageCode,
				IsPremium:    user.IsPremium,
				ChatID:       user.ID,
				Profile: map[string]interface{}{
					"chat_id": user.ID,
					"status":  "member",
				},
			},
		},
	}

	err := s.service.RegisterUser(regData)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err)
		return c.Send("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	return s.showMainMenu(c)

}

func generatePassword() string {
	const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	b := make([]byte, 12)
	for i := range b {
		b[i] = charset[rand.Intn(len(charset))]
	}
	return string(b)
}
