package bot

import (
	"bytes"
	"errors"
	"fmt"
	"log"
	"math/rand"
	"strings"

	"github.com/ryabkov82/vpnbot/internal/config"
	"github.com/ryabkov82/vpnbot/internal/models"
	"github.com/ryabkov82/vpnbot/internal/service"

	"gopkg.in/telebot.v3"
)

// Service —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
type Service struct {
	service *service.Service
	config  *config.Config
}

func NewService(service *service.Service, cfg *config.Config) *Service {
	return &Service{
		service: service,
		config:  cfg,
	}
}

func (s *Service) handleStart(c telebot.Context) error {

	user, err := s.service.GetUser(c.Chat().ID)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err)
		return c.Send("–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
	}

	if user == nil {
		return s.showRegistrationMenu(c)
	}

	return s.showMainMenu(c)
}

func (s *Service) handleMenu(c telebot.Context) error {
	return s.showMainMenu(c)
}

// showRegistrationMenu –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
func (s *Service) showRegistrationMenu(c telebot.Context) error {
	menu := &telebot.ReplyMarkup{}
	btnRegister := menu.Data("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚úç", "/register")

	username := c.Sender().Username
	if username == "" {
		username = "–Ω–µ —É–∫–∞–∑–∞–Ω"
	}

	msg := "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å"
	/*
		msg := fmt.Sprintf(
			"–î–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–æ–º —É–∫–∞–∂–∏—Ç–µ _Telegram –ª–æ–≥–∏–Ω_ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞.\n\n"+
				"*Telegram –ª–æ–≥–∏–Ω*: %s\n\n"+
				"*–ö–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*: %s",
			username,
			s.config.Cli.URL,
		)
	*/

	menu.Inline(menu.Row(btnRegister))
	err := c.Send(msg, menu, telebot.ModeMarkdown)
	if err != nil {
		if strings.Contains(err.Error(), "can't parse entities") {
			// –ü—Ä–æ–±—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
			safeText := strings.ReplaceAll(msg, "*", "\\*")
			safeText = strings.ReplaceAll(safeText, "_", "\\_")
			safeText = strings.ReplaceAll(safeText, "[", "\\[")

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤–µ—Ä—Å–∏—é
			return c.Send(safeText, menu, telebot.ModeMarkdown)
		}
		return err
	}
	return nil
}

// showMainMenu –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
func (s *Service) showMainMenu(c telebot.Context) error {

	if c.Message() != nil {
		if err := c.Bot().Delete(c.Message()); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
	}

	/*
		if c.Callback() != nil {
			// –î–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤
			if err := c.Bot().Delete(c.Callback().Message); err != nil {
				log.Printf("Delete callback message error: %v", err)
			}
		}


			return c.Send(
				"–í—Å–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã",
				&telebot.SendOptions{
					ReplyMarkup: &telebot.ReplyMarkup{
						RemoveKeyboard: true, // –£–¥–∞–ª—è–µ–º Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
						InlineKeyboard: nil,  // –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
					},
				},
			)
	*/
	/*
		// 1. –°–æ–∑–¥–∞–µ–º Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞)
		replyMarkup := &telebot.ReplyMarkup{
			ResizeKeyboard:  true,
			OneTimeKeyboard: false,
			Selective:       true, // –í–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
		}
		btnMenu := replyMarkup.Text("üìã –ú–µ–Ω—é")
		replyMarkup.Reply(replyMarkup.Row(btnMenu))

		err := c.Send("–ú–µ–Ω—é",
			&telebot.SendOptions{
				ParseMode:   "HTML",
				ReplyMarkup: replyMarkup, // Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
			})

		if err != nil {
			return err
		}
	*/

	msg := "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ VPN –∫–ª—é—á–∞–º–∏"

	// 2. –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é (–∫–Ω–æ–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è)
	inlineMenu := &telebot.ReplyMarkup{}
	btnBalance := inlineMenu.Data("üí∞ –ë–∞–ª–∞–Ω—Å", "/balance")
	btnKeys := inlineMenu.Data("üóù –°–ø–∏—Å–æ–∫ VPN –∫–ª—é—á–µ–π", "/list")
	btnHelp := inlineMenu.Data("üóì –ü–æ–º–æ—â—å", "/help")
	btnSupport := inlineMenu.URL("üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞", s.config.Telegram.SupportChat)

	inlineMenu.Inline(
		inlineMenu.Row(btnBalance),
		inlineMenu.Row(btnKeys),
		inlineMenu.Row(btnHelp),
		inlineMenu.Row(btnSupport),
	)

	return c.Send(msg, inlineMenu)

}

func (s *Service) handleBalance(c telebot.Context) error {

	if c.Callback() != nil {
		// –î–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤
		if err := c.Bot().Delete(c.Callback().Message); err != nil {
			log.Printf("Delete callback message error: %v", err)
		}
	}

	userBalance, err := s.service.GetUserBalance(c.Chat().ID)
	if err != nil {
		if errors.Is(err, service.ErrUserNotFound) {
			return s.showRegistrationMenu(c)
		}
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err)
		return c.Send("–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
	}

	menu := &telebot.ReplyMarkup{}
	btnPay := menu.WebApp("‚úö –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", &telebot.WebApp{
		URL: fmt.Sprintf("%s/shm/v1/public/tg_payments_webapp?format=html&user_id=%s&profile=telegram_bot", s.config.API.BaseURL, userBalance.ID),
	})

	btnPays := menu.Data("‚ò∞ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", "/pays")

	btnBack := menu.Data("‚á¶ –ù–∞–∑–∞–¥", "/menu")

	menu.Inline(
		menu.Row(btnPay),
		menu.Row(btnPays),
		menu.Row(btnBack),
	)

	msg := fmt.Sprintf("üí∞ *–ë–∞–ª–∞–Ω—Å*: %.2f\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å: *%.2f*", userBalance.Balance, userBalance.Forecast)

	return c.Send(
		msg,
		menu,
		telebot.ModeMarkdown,
	)
}

func (s *Service) handleList(c telebot.Context) error {

	if c.Callback() != nil {
		// –î–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤
		if err := c.Bot().Delete(c.Callback().Message); err != nil {
			log.Printf("Delete callback message error: %v", err)
		}
	}

	services, err := s.service.GetUserServices(c.Chat().ID)
	if err != nil {
		if errors.Is(err, service.ErrUserNotFound) {
			return s.showRegistrationMenu(c)
		}
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥: %v", err)
		return c.Send("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥")
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
	//if len(services) == 0 {
	//	return c.Send("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥")
	//}

	menu := &telebot.ReplyMarkup{}
	var rows []telebot.Row

	for _, s := range services {
		var status string
		switch s.Status {
		case "ACTIVE":
			status = "‚úÖ"
		case "BLOCK":
			status = "‚ùå"
		default:
			status = "‚è≥"
		}

		rows = append(rows, menu.Row(
			menu.Data(fmt.Sprintf("%s - %s", status, s.Name), "/service", fmt.Sprint(s.ServiceID)),
		))
	}

	rows = append(rows,
		menu.Row(menu.Data("üõí –ù–æ–≤—ã–π –∫–ª—é—á", "/pricelist")),
		menu.Row(menu.Data("‚á¶ –ù–∞–∑–∞–¥", "/menu")),
	)

	menu.Inline(rows...)

	return c.Send("üóù –í–∞—à–∏ –∫–ª—é—á–∏:", menu)
}

func (s *Service) handlePricelist(c telebot.Context) error {

	if c.Callback() != nil {
		// –î–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤
		if err := c.Bot().Delete(c.Callback().Message); err != nil {
			log.Printf("Delete callback message error: %v", err)
		}
	} else {
		// –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, —Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
		user, err := s.service.GetUser(c.Chat().ID)
		if err != nil {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥: %v", err)
			return c.Send("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		}
		if user == nil {
			return s.showRegistrationMenu(c)
		}
	}

	menu := &telebot.ReplyMarkup{}
	btnBack := menu.Data("‚á¶ –ù–∞–∑–∞–¥", "/menu")

	services, err := s.service.GetServices()

	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥: %v", err)
		return c.Send("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	var rows []telebot.Row
	for _, s := range services {
		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞
		//price := formatPrice(s.Cost, s.Period)
		rows = append(rows, menu.Row(
			menu.Data(fmt.Sprintf("üõí %s - %.2f —Ä—É–±.", s.Name, s.Cost), "/serviceorder", fmt.Sprint(s.ServiceID)),
		))
	}
	rows = append(rows, menu.Row(btnBack))
	menu.Inline(rows...)

	msg := "‚ò∑ –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –∑–∞–∫–∞–∑–∞:"
	return c.Send(msg, menu)

}

func (s *Service) handleServiceOrder(c telebot.Context, serviceID string) error {

	_, err := s.service.ServiceOrder(c.Chat().ID, serviceID)

	if err != nil {
		if errors.Is(err, service.ErrUserNotFound) {
			return s.showRegistrationMenu(c)
		}
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ —É—Å–ª—É–≥–∏: %v", err)
		return c.Send("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ —É—Å–ª—É–≥–∏")
	}

	return s.handleList(c)

}

func (s *Service) handleService(c telebot.Context, serviceID string) error {

	if c.Callback() != nil {
		// –î–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤
		if err := c.Bot().Delete(c.Callback().Message); err != nil {
			log.Printf("Delete callback message error: %v", err)
		}
	}

	us, err := s.service.GetUserService(serviceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —É—Å–ª—É–≥–µ: %v", err)
		return c.Send("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —É—Å–ª—É–≥–µ")
	}

	if us == nil {
		log.Printf("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: %s", serviceID)
		return c.Send("‚ö†Ô∏è –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ —Å—Ç–∞—Ç—É—Å
	var icon, status string
	switch us.Status {
	case "ACTIVE":
		icon = "‚úÖ"
		status = "–†–∞–±–æ—Ç–∞–µ—Ç"
	case "BLOCK":
		icon = "‚ùå"
		status = "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"
	case "NOT PAID":
		icon = "üí∞"
		status = "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"
	default:
		icon = "‚è≥"
		status = "–û–±—Ä–∞–±–æ—Ç–∫–∞"
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	var text strings.Builder
	text.WriteString(fmt.Sprintf("<b>–ö–ª—é—á</b>: %s %s", icon, us.Name))

	if us.Expire != "" {
		text.WriteString(fmt.Sprintf("\n\n<b>–û–ø–ª–∞—á–µ–Ω –¥–æ</b>: %s",
			us.Expire))
	}

	text.WriteString(fmt.Sprintf("\n\n<b>–°—Ç–∞—Ç—É—Å</b>: %s", status))

	// –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	menu := &telebot.ReplyMarkup{}
	var rows []telebot.Row

	// –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ (–¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞)
	if us.Status == "ACTIVE" {
		if strings.HasPrefix(us.Category, "vpn-mz-") {

			rows = append(rows, menu.Row(
				menu.WebApp("–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", &telebot.WebApp{
					URL: fmt.Sprintf("%s?telegram=true", us.KeyMarzban.SubscriptionURL),
				}),
				menu.Data("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å–∫–∏", "/show_mz_keys", fmt.Sprint(us.ServiceID)),
			))

		} else {
			rows = append(rows, menu.Row(
				menu.Data("üóù –°–∫–∞—á–∞—Ç—å –∫–ª—é—á", "/download_qr", fmt.Sprint(us.ServiceID)),
				menu.Data("üëÄ –ü–æ–∫–∞–∑–∞—Ç—å QR –∫–æ–¥", "/show_qr", fmt.Sprint(us.ServiceID)),
			))
		}
	}

	// –í—Ç–æ—Ä–æ–π —Ä—è–¥ (–¥–ª—è –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö/–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
	if us.Status == "NOT PAID" || us.Status == "BLOCK" {
		rows = append(rows, menu.Row(
			menu.Data("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å", "/balance", ""),
		))
	}

	// –¢—Ä–µ—Ç–∏–π —Ä—è–¥ (—É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∫—Ä–æ–º–µ PROGRESS)
	if us.Status != "PROGRESS" {
		rows = append(rows, menu.Row(
			menu.Data("‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á", "/delete", fmt.Sprint(us.ServiceID)),
		))
	}

	// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
	rows = append(rows, menu.Row(
		menu.Data("‚á¶ –ù–∞–∑–∞–¥", "/list", ""),
	))

	menu.Inline(rows...)

	msg := text.String()

	return c.Send(msg, &telebot.SendOptions{
		ParseMode:   telebot.ModeHTML,
		ReplyMarkup: menu,
	})
}

func (s *Service) handleDownloadUserKey(c telebot.Context, serviceID string) error {

	fileBytes, err := s.service.DownloadUserKey(c.Chat().ID, serviceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∫–ª—é—á–∞: %v", err)
		return c.Send("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∫–ª—é—á–∞")
	}

	file := &telebot.Document{
		File:     telebot.FromReader(bytes.NewReader(fileBytes)),
		FileName: fmt.Sprintf("vpn%s.conf", serviceID), // –£–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
		MIME:     "text/plain; charset=utf-8",          // –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π MIME-—Ç–∏–ø
	}

	return c.Send(file)

}

func (s *Service) handleShowMZ(c telebot.Context, serviceID string) error {

	userKey, err := s.service.GetUserKeyMarzban(c.Chat().ID, serviceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —É—Å–ª—É–≥–µ: %v", err)
		return c.Send("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —É—Å–ª—É–≥–µ")
	}

	qrBytes, err := service.GenerateQRCode(userKey.SubscriptionURL)

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: %v", err)
		return c.Send("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥")
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
	photo := &telebot.Photo{
		File:    telebot.FromReader(bytes.NewReader(qrBytes)),
		Caption: fmt.Sprintf("<b>Subscription URL:</b>\n<code>%s</code>", userKey.SubscriptionURL),
	}

	err = c.Send(photo, &telebot.SendOptions{
		ParseMode: telebot.ModeHTML,
	})

	if err != nil {
		return err
	}

	link := userKey.Links[0]

	qrBytes, err = service.GenerateQRCode(userKey.SubscriptionURL)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: %v", err)
		return c.Send("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥")
	}

	caption := ""
	if strings.HasPrefix(link, "ss") {
		caption = fmt.Sprintf("<b>ShadowSocks:</b>\n<code>%s</code>", link)
	} else {
		caption = fmt.Sprintf("<b>VLESS TCP:</b>\n<code>%s</code>", link)
	}

	photo = &telebot.Photo{
		File:    telebot.FromReader(bytes.NewReader(qrBytes)),
		Caption: caption,
	}

	return c.Send(photo, &telebot.SendOptions{
		ParseMode: telebot.ModeHTML,
	})

}

func (s *Service) handleShowQR(c telebot.Context, serviceID string) error {

	qrBytes, err := s.service.GetQRCodeUserKey(c.Chat().ID, serviceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: %v", err)
		return c.Send("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥")
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
	photo := &telebot.Photo{
		File:    telebot.FromReader(bytes.NewReader(qrBytes)),
		Caption: "–í–∞—à QR-–∫–æ–¥",
	}

	return c.Send(photo)

}

func (s *Service) handleDelete(c telebot.Context, serviceID string) error {

	if c.Callback() != nil {
		// –î–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤
		if err := c.Bot().Delete(c.Callback().Message); err != nil {
			log.Printf("Delete callback message error: %v", err)
		}
	}

	// –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	menu := &telebot.ReplyMarkup{}
	var rows []telebot.Row
	rows = append(rows, menu.Row(
		menu.Data("üß® –î–ê, –£–î–ê–õ–ò–¢–¨! üî•", "/delete_confirmed", serviceID),
	))

	// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
	rows = append(rows, menu.Row(
		menu.Data("‚á¶ –ù–∞–∑–∞–¥", "/list", ""),
	))

	menu.Inline(rows...)

	msg := "ü§î <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏. –£—Å–ª—É–≥—É –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å!</b>"

	return c.Send(msg, &telebot.SendOptions{
		ParseMode:   telebot.ModeHTML,
		ReplyMarkup: menu,
	})
}

func (s *Service) handleDeleteConfirmed(c telebot.Context, serviceID string) error {

	err := s.service.DeleteUserService(c.Chat().ID, serviceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏: %v", err)
		return c.Send("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏")
	}

	// 3. –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
	if err := c.Delete(); err != nil {
		log.Printf("Error deleting confirmation message: %v", err)
	}

	// 4. –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
	return s.handleList(c)

}

func (s *Service) handleRegister(c telebot.Context) error {

	user := c.Sender()

	login := fmt.Sprintf("@%d", user.ID)
	userID := fmt.Sprintf("%d", user.ID)

	// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	regData := models.UserRegistrationRequest{
		Login:    login,
		Password: generatePassword(), // –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è
		FullName: fmt.Sprintf("%s %s", user.FirstName, user.LastName),
		Settings: models.UserSettings{
			Telegram: models.TelegramInfo{
				UserID:       userID,
				Username:     user.Username,
				Login:        user.Username,
				FirstName:    user.FirstName,
				LastName:     user.LastName,
				LanguageCode: user.LanguageCode,
				IsPremium:    user.IsPremium,
				ChatID:       user.ID,
				Profile: map[string]interface{}{
					"chat_id": user.ID,
					"status":  "member",
				},
			},
		},
	}

	err := s.service.RegisterUser(regData)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err)
		return c.Send("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	return s.showMainMenu(c)

}

func (s *Service) handleHelp(c telebot.Context) error {

	if c.Callback() != nil {
		// –î–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤
		if err := c.Bot().Delete(c.Callback().Message); err != nil {
			log.Printf("Delete callback message error: %v", err)
		}
	} else {
		// –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, —Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
		user, err := s.service.GetUser(c.Chat().ID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: %v", err)
			return c.Send("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		}
		if user == nil {
			return s.showRegistrationMenu(c)
		}
	}

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	supportBtn := telebot.InlineButton{
		Text: "–ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
		URL:  s.config.Telegram.SupportChat,
	}

	backBtn := telebot.InlineButton{
		Text: "‚á¶ –ù–∞–∑–∞–¥",
		Data: "/menu",
	}

	// –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	inlineKeys := [][]telebot.InlineButton{
		{supportBtn},
		{backBtn},
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π
	//caption := `1Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –∫ —Å–µ–±–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ. –°–∫–∞—á–∞—Ç—å –¥–ª—è <a href="https://apps.apple.com/us/app/wireguard/id1441195209">iPhone</a>, <a href="https://play.google.com/store/apps/details?id=com.wireguard.android">Android</a>, <a href="https://apps.apple.com/us/app/wireguard/id1451685025">Mac</a>.
	caption := `1Ô∏è‚É£ –í —Ä–∞–∑–¥–µ–ª–µ <b>"–°–ø–∏—Å–æ–∫ VPN –∫–ª—é—á–µ–π"</b> –∑–∞–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á, –≤—ã–±—Ä–∞–≤ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ.

2Ô∏è‚É£ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã (–ø—É–Ω–∫—Ç –º–µ–Ω—é <b>"–ë–∞–ª–∞–Ω—Å" - "‚úö –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"</b>) –≤ —Ç–æ–º –∂–µ —Ä–∞–∑–¥–µ–ª–µ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–ª—é—á –∏ –Ω–∞–∂–º–∏—Ç–µ <b>"–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"</b>.

3Ô∏è‚É£ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ.
`
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	err := c.Send(
		caption,
		//&telebot.Photo{
		//	//	File:    telebot.FromURL("https://media.tenor.com/5KHjsG1Aw1YAAAAi/photos-google-photos.gif"),
		//	Caption: caption,
		//},
		&telebot.SendOptions{
			ParseMode: telebot.ModeHTML, // –í v3+ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ—Å—Ç–æ "HTML"
			//Protected: true,             // –í v3+ protect_content –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ Protected
			ReplyMarkup: &telebot.ReplyMarkup{
				InlineKeyboard: inlineKeys,
			},
		},
	)

	return err
}

func (s *Service) handlePays(c telebot.Context) error {

	if c.Callback() != nil {
		// –î–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤
		if err := c.Bot().Delete(c.Callback().Message); err != nil {
			log.Printf("Delete callback message error: %v", err)
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	userID := c.Sender().ID

	// –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
	pays, err := s.service.GetUserPays(userID)
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö: %v", err)
		return c.Send("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö")
	}

	// –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	var inlineKeys [][]telebot.InlineButton

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
	for _, pay := range pays {
		btn := telebot.InlineButton{
			Text: fmt.Sprintf("–î–∞—Ç–∞: %s, –°—É–º–º–∞: %d —Ä—É–±.", pay.Date, pay.Money),
			Data: "/menu", // –í v3+ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Data –≤–º–µ—Å—Ç–æ CallbackData
		}
		inlineKeys = append(inlineKeys, []telebot.InlineButton{btn})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	backBtn := telebot.InlineButton{
		Text: "‚á¶ –ù–∞–∑–∞–¥",
		Data: "/menu",
	}
	inlineKeys = append(inlineKeys, []telebot.InlineButton{backBtn})

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	return c.Send(
		"–ü–ª–∞—Ç–µ–∂–∏",
		&telebot.SendOptions{
			ReplyMarkup: &telebot.ReplyMarkup{
				InlineKeyboard: inlineKeys,
			},
		},
	)

}

func generatePassword() string {
	const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	b := make([]byte, 12)
	for i := range b {
		b[i] = charset[rand.Intn(len(charset))]
	}
	return string(b)
}

func formatPrice(cost int, period int) string {
	if period == 1 {
		return fmt.Sprintf("%d —Ä—É–±./–º–µ—Å", cost)
	} else if period == 12 {
		return fmt.Sprintf("%d —Ä—É–±./–≥–æ–¥", cost)
	}
	return fmt.Sprintf("%d$/%d –º–µ—Å", cost, period)
}
